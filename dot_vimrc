" word highlighting
syntax on

" Enable mouse
set mouse=a

" Set Line number
set relativenumber
set number

" Status bar and ruler
set showtabline=2
set laststatus=2
set ruler

" Higlight search
set hlsearch
set incsearch
set ignorecase
set smartcase

" Clear highlighting on escape in normal mode
nnoremap <silent> <Esc><Esc> :let @/=""<CR>

" copy to clipboard
set clipboard=unnamed

" keep pages in buffer
set hidden

" set tab key
set tabstop=4 softtabstop=4
set shiftwidth=4
set expandtab
set nowrap

" Set scrool to sotp 8 line befor top or bottom
set scrolloff=8

" Undo and redo keep after you alredy closed vim
set undodir=~/.vimundo
set undofile
set undolevels=100

" Automatically wrap text that extend beyond the screen length
set wrap

" Enable autocompletion, activate with ctrl+n
set wildmode=longest,list,full
set backspace=indent,eol,start
set autoindent
set signcolumn=yes

" Show cursor line
set cursorline

"Vim plugins
call plug#begin('~/.vim/plugged')

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'itchyny/lightline.vim'
Plug 'shinchu/lightline-gruvbox.vim'
Plug 'vim-syntastic/syntastic'
Plug 'scrooloose/nerdtree'
Plug 'voldikss/vim-floaterm'
Plug 'tpope/vim-commentary'
Plug 'ryanoasis/vim-devicons'
Plug 'tiagofumo/vim-nerdtree-syntax-highlight'
Plug 'morhetz/gruvbox'
Plug 'flw-cn/vim-nerdtree-l-open-h-close'

call plug#end()

" Gruvbox theme
set t_Co=256
colorscheme gruvbox


" Coomenting
autocmd FileType apache setlocal commentstring=#\ %s

" Lightline configuretion

function! LightLineReadonly()
  return &readonly ? '' : ''
endfunction

function! LightLineFugitive()
  if exists('*fugitive#head')
    let branch = fugitive#head()
    return branch !=# '' ? ' '.branch : ''
  endif
  return ''
endfunction

function! LightLineModified()
  return &ft =~ 'help' ? '' : &modified ? '' : &modifiable ? '' : '-'
endfunction

function! LighLineFileformat()
  return &fileencoding . ' ' . FileFormatIcon()
endfunction
function! FileFormatIcon()
  return strlen(&filetype) ? WebDevIconsGetFileFormatSymbol() : 'no ft'
endfunction

function! LightLineFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype . ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft') : ''
endfunction

function! LightLineFname()
  let icon = (strlen(&filetype) ? ' ' . WebDevIconsGetFileTypeSymbol() : 'no ft')
  let filename = LightLineFilename()
  let modified = ModifiedStatus()
  if filename == ''
      return ''
  endif
  return join([ filename, icon, modified],'')
endfunction
function! LightLineFilename()
  let readonly = LightLineReadonly()
  return expand('%:t') =~# '__Tagbar__\|__Mundo__\|__Mundo_Preview__\|NERD_tree' ? '' :
    \ ('' != readonly ? readonly . ' ' : '') .
    \ ('' != expand('%:t') ? expand('%:t') : '')
endfunction
function! ModifiedStatus()
  let modified = LightLineModified()
  return ('' != modified ? ' ' . modified : '')
endfunction

function! LightLineMode()
  let fname = expand('%:t')
  return fname =~# '^__Tagbar__' ? 'Tagbar' :
    \ fname == '__Mundo__' ? 'Mundo' :
    \ fname == '__Mundo_Preview__' ? 'Mundo Preview' :
    \ fname =~ 'NERD_tree' ? 'NERDTree' :
    \ &ft == 'unite' ? 'Unite' :
    \ &ft == 'vimfiler' ? 'VimFiler' :
    \ &ft == 'vimshell' ? 'VimShell' :
    \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineTabFiletypeIcon(n)
  let fticon = WebDevIconsGetFileTypeSymbol()
  return fticon !=# '' ? fticon : ''
endfunction

function! LightlineTabs() abort
  let [x, y, z] = [[], [], []]
  let nr = tabpagenr()
  let cnt = tabpagenr('$')
  for i in range(1, cnt)
    call add(i < nr ? x : i == nr ? y : z, (i > nr ? '%<' : '') . '%' . i . 'T%{lightline#onetab(' . i . ',' . (i == nr) . ')}' . (i == cnt ? '%T' : ''))
  endfor
  " truncate x here
  return [x, y, z]
endfunction

let g:lightline = {
  \ 'colorscheme': 'gruvbox',
  \ 'active': {
  \   'left': [
  \     [ 'mode', 'paste' ],
  \     [ 'fugitive', 'filename' ]
  \   ],
  \   'right': [
  \     [ 'linter_checking', 'linter_errors', 'linter_warnings', 'linter_ok' ],
  \     ['percent', 'lineinfo'],
  \     ['fileformat'],
  \   ]
  \ },
  \ 'component': {
  \   'lineinfo': ' %3l:%-2v%<',
  \   'percent': '☰ %3p%%',
  \ },
  \ 'component_function': {
  \   'fugitive': 'LightLineFugitive',
  \   'mode': 'LightLineMode',
  \   'fileformat': 'LighLineFileformat',
  \   'filename': 'LightLineFname',
  \ },
  \ 'component_expand': {
  \   'linter_checking': 'lightline#ale#checking',
  \   'linter_warnings': 'lightline#ale#warnings',
  \   'linter_errors': 'lightline#ale#errors',
  \   'linter_ok': 'lightline#ale#ok',
  \     'tabs' : 'LightlineTabs',
  \ },
  \ 'component_type': {
  \   'linter_checking': 'left',
  \   'linter_warnings': 'warning',
  \   'linter_errors': 'error',
  \   'linter_ok': 'raw',
  \ },
  \ 'separator': {
  \   'left': '',
  \   'right': ''
  \ },
  \ 'subseparator': {
  \   'left': '',
  \   'right': ''
  \ },
  \ 'tab_component_function': {
  \   'fticon': 'LightlineTabFiletypeIcon',
  \ },
  \ 'tab': {
  \   'active': ['filename', 'fticon'],
  \   'inactive': ['tabnum', 'filename'],
  \ },
  \ 'tabline' : {
  \ 'left': [ [ 'tabs' ] ],
  \ 'right': [ [ 'close' ] ] }
  \ }

let g:lightline#ale#indicator_checking = "\uf110 "
let g:lightline#ale#indicator_warnings = "\uf071 "
let g:lightline#ale#indicator_errors = "\uf05e "
let g:lightline#ale#indicator_ok = "\uf00c "

" FZF configuration
let g:fzf_preview_window = 'right:50%'
let g:fzf_layout = { 'window': { 'width': 0.9, 'height': 0.6  } }

" Run NertTree
map <F5> :NERDTreeToggle<CR>
autocmd VimEnter * call NERDTreeAddKeyMap({ 'key': '<2-LeftMouse>', 'scope': "FileNode", 'callback': "OpenInTab", 'override':1 })
    function! OpenInTab(node)
        call a:node.activate({'reuse': 'all', 'where': 't'})
    endfunction

" Open and close folder with let and right arrow in NerdTree >> Need vim-nerdtree-l-open-h-close plugin
autocmd FileType nerdtree nmap <buffer> <left> h
autocmd FileType nerdtree nmap <buffer> <right> l

" Exit Vim if NERDTree is the only window remaining in the only tab.
autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif

" Icons in Neert three and show hidden files
let NERDTreeShowHidden=1
let NERDTreeMapOpenInTab='<ENTER>'
set encoding=UTF-8

" Run Termina
let g:floaterm_keymap_toggle = '<F6>'

" Clear unwanted white space
autocmd BufWritePre * :%s/\s\+$//e

"run chezmoi apply whenever you save a dotfile
autocmd BufWritePost ~/.local/share/chezmoi/* ! chezmoi apply --source-path "%"

